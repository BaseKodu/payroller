'''
We will use this migration to import the city data from the simplemaps worldcities file.
'''
# Generated by Django 5.0.9 on 2024-10-12 14:02
# payroller/misc/migrations/0002_import_city_data.py
from django.db import migrations, models
import pandas as pd
import os
from django.conf import settings


def import_city_data(apps, schema_editor):
    Country = apps.get_model('misc', 'Country')
    Province = apps.get_model('misc', 'Province')
    City = apps.get_model('misc', 'City')

    file_path = settings.PATH_TO_WORLDCITIES_FILES

    try:
        data = pd.read_excel(file_path)

        print("Columns in the Excel file:", data.columns.tolist())

        # Check if required columns exist
        required_columns = ['country', 'admin_name', 'city', 'city_ascii', 'lat', 'lng', 'id', 'iso2', 'iso3']
        missing_columns = [col for col in required_columns if col not in data.columns]

        if missing_columns:
            print(f"Missing columns: {missing_columns}")
            return

        # Create a cache for countries and provinces to avoid duplicate entries
        country_cache = {}
        province_cache = {}

        # Iterate over the rows and create the corresponding objects
        for index, row in data.iterrows():
            country_name = row['country']
            province_name = row['admin_name']

            # Handle Country
            if country_name not in country_cache:
                country, created = Country.objects.get_or_create(
                    name=country_name,
                    iso2=str(row['iso2'])[:2],
                    iso3=str(row['iso3'])[:3]
                )
                country_cache[country_name] = country
            else:
                country = country_cache[country_name]

            # Handle Province
            if (province_name, country_name) not in province_cache:
                province, created = Province.objects.get_or_create(
                    name=province_name,
                    country=country
                )
                province_cache[(province_name, country_name)] = province
            else:
                province = province_cache[(province_name, country_name)]

            # Handle City
            City.objects.create(
                name=row['city'],
                name_ascii=row['city_ascii'],
                latitude=row['lat'],
                longitude=row['lng'],
                province=province,
                simplemaps_id=row['id']
            )

    except Exception as e:
        print(f"An error occurred: {str(e)}")
        print(f"Data types of columns: {data.dtypes}")
        raise

    print("Data import completed successfully.")


class Migration(migrations.Migration):

    dependencies = [
        ('misc', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(import_city_data),
    ]
